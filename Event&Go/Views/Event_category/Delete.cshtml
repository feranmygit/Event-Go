@model WebApp.Models.Event_category

@{
    ViewData["Title"] = "Delete";
}

<partial name="_Spinner" />

<div class="category-details-container">
    <div class="category-details-card">
        <h2 class="danger-delete">Delete @Html.DisplayFor(model => model.Category)</h2>

        <div class="category-details-info">
            <div class="details-row">
                <label>Description:</label>
                <span>@Html.DisplayFor(model => model.Description)</span>
            </div>
            <div class="details-row">
                <label>Price Per Hour:</label>
                <span>@Html.DisplayFor(model => model.PricePerHour) USD</span>
            </div>
            <div class="details-row">
                <label>Price Per Day:</label>
                <span>@Html.DisplayFor(model => model.PricePerDay) USD</span>
            </div>
            <div class="details-row">
                <label>Maximum Capacity:</label>
                <span>@Html.DisplayFor(model => model.MaxCapacity) People</span>
            </div>
            <div class="details-row">
                <label>Status:</label>
                <span>@(Model.IsActive ? "Active" : "Inactive")</span>
            </div>
        </div>
        <h3 class="danger-delete">Are you sure you want to delete this?</h3>


        <div class="category-details-actions">
            <form asp-action="Delete" enctype="multipart/form-data" id="eventForm" class="custom-event-form" novalidate>
                <input type="hidden" asp-for="Id" required/>
                <input type="submit" value="Delete" class="btn-mode delete-btn" />
                <a asp-action="Index" class="action-btn back-btn">Back to List</a>
            </form>

           
        </div>
    </div>
</div>


        @section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const form = document.getElementById("eventForm");
            const spinner = document.getElementById("spinner-overlay");

            // Handle form submission
            form.addEventListener("submit", (event) => {
                // Check form validity
                if (!form.checkValidity()) {
                    event.preventDefault(); // Prevent form submission
                    form.classList.add("was-validated");
                    spinner.style.display = "none";
                } else {
                    // Show spinner if valid
                    spinner.style.display = "flex";
                }
            });

            // Update ImageName field when a file is selected
            document.getElementById("ImageFile").addEventListener("change", function () {
                const fileName = this.files[0]?.name || "";
                document.getElementById("ImageName").value = fileName;
            });

            // // Sync ToEmailAddress and FromEmailAddress fields
            // document.getElementById("ToEmailAddress").addEventListener("change", function () {
            //     document.getElementById("FromEmailAddress").value = this.value;
            // });
        });
    </script>
    }