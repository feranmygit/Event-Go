@model WebApp.Models.Event_category

@{
    ViewData["Title"] = "Create";
}

<partial name="_Spinner" />

<h1 class="custom-event-title title-blog">Create Category</h1>
<hr />



<div class="custom-event-form-container">
    <form asp-action="Create" method="post" enctype="multipart/form-data" id="eventForm" class="custom-event-form" novalidate>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- Category Name -->
        <div class="custom-form-group">
            <label asp-for="Category" class="custom-label"></label>
            <input asp-for="Category" class="custom-input" placeholder="Enter category name" required />
            <span asp-validation-for="Category" class="custom-validation-message"></span>
        </div>

        <!-- Category Description -->
        <div class="custom-form-group">
            <label asp-for="Description" class="custom-label"></label>
            <input asp-for="Description" class="custom-input" placeholder="Enter category description" required />
            <span asp-validation-for="Description" class="custom-validation-message"></span>
        </div>

        <!-- Category Price Per hour -->
        <div class="custom-form-group">
            <label asp-for="PricePerHour" class="custom-label"></label>
            <input asp-for="PricePerHour" class="custom-input" placeholder="Enter p/hr" required />
            <span asp-validation-for="PricePerHour" class="custom-validation-message"></span>
        </div>

        <!-- Category Price Per day -->
        <div class="custom-form-group">
            <label asp-for="PricePerDay" class="custom-label"></label>
            <input asp-for="PricePerDay" class="custom-input" placeholder="Enter p/day" required />
            <span asp-validation-for="PricePerDay" class="custom-validation-message"></span>
        </div>

        <!-- Category If Active -->
        <div class="custom-form-group">
            @Html.LabelFor(model => model.IsActive, "Is Active", htmlAttributes: new { @class = "custom-label" })
                @Html.DropDownListFor(model => model.IsActive, 
                    new SelectList(new[] 
                    { 
                        new { Value = "true", Text = "True" }, 
                        new { Value = "false", Text = "False" } 
                    }, "Value", "Text", null),
                     new { @class = "custom-input" })
            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "custom-validation-message" })
            </div>

        <!-- Category Capacity -->
        <div class="custom-form-group">
            <label asp-for="MaxCapacity" class="custom-label"></label>
            <input asp-for="MaxCapacity" class="custom-input" placeholder="Enter Capacity" required />
            <span asp-validation-for="MaxCapacity" class="custom-validation-message"></span>
        </div>

        <div class="custom-form-group">
            <input type="submit" value="Create Event" class="custom-submit-btn" />
        </div>
        </form>
    </div>

    <!-- Back to List Button -->
    <div class="custom-back-link">
        <a asp-action="Index" class="custom-back-btn">Back to List</a>
    </div>



@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const form = document.getElementById("eventForm");
            const spinner = document.getElementById("spinner-overlay");

            // Handle form submission
            form.addEventListener("submit", (event) => {
                // Check form validity
                if (!form.checkValidity()) {
                    event.preventDefault(); // Prevent form submission
                    form.classList.add("was-validated");
                    spinner.style.display = "none";
                } else {
                    // Show spinner if valid
                    spinner.style.display = "flex";
                }
            });

        });
    </script>
}




